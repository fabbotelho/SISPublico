package com.boavistainfo.bvsis.resources;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.boavistainfo.bvsis.entities.Cliente;
import com.boavistainfo.bvsis.repositories.ClienteRepository;
import com.boavistainfo.bvsis.services.ClienteService;

@RestController
@RequestMapping(value = "/clientes")
public class ClienteResource {

	@Autowired
	private ClienteService service;

	@GetMapping
	public ResponseEntity<List<Cliente>> findAll() {
		List<Cliente> list = service.findAll();
		return ResponseEntity.ok().body(list);
	}
	
	@GetMapping(path ="/nome/{nome}")
	public Iterable<Cliente> findByNome(@PathVariable String nome){
		return service.findAll();
	}
	
	//findAll diferente
	@GetMapping(value = "/all")
	public Iterable<Cliente> todos(){
		return service.findAll();
	}
	/*findAll com paginação e limite de elementos por página
	@GetMapping(path = "/pagina/{numeroPagina}")
	public Iterable<Cliente> findPage(@PathVariable int numeroPagina,@PathVariable int qtdPagina){
		if(qtdPagina >= 5) qtdPagina = 5;
		PageRequest page = PageRequest.of(numeroPagina, qtdPagina);
		return service.findAll(page);
	}*/
	

	@GetMapping(value = "/{id}")
	public ResponseEntity<Cliente> findById(@PathVariable Long id) {
		Cliente obj = service.findById(id);
		return ResponseEntity.ok().body(obj);
	}
	//Alternativa para usar o POST e PUT no mesmo método
	//@RequestMapping(method ={RequestMethod.POST, RequestMethod.PUT})
	@PostMapping
	public ResponseEntity<Cliente> insert(@RequestBody Cliente obj){
		obj = service.insert(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).body(obj);
	}
	
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<Void> delete(@PathVariable Long id){
		service.delete(id);
		return ResponseEntity.noContent().build();
	}
	
	@PutMapping(value = "/{id}")
	public ResponseEntity<Cliente> update(@PathVariable Long id, @RequestBody Cliente obj){
		obj = service.update(id, obj);
		return ResponseEntity.ok().body(obj);
	}

}
